import { Button, VerticalBox, AboutSlint, Palette, TabWidget, ListView, HorizontalBox } from "std-widgets.slint";
import { BarGauge, LayoutMetrics, TitleBar, StatusBar } from "widgets.slint";

struct WeatherRecord {
    temperature: float, // Temperature in degrees Celsius
    humidity: float,    // Humidity in percent
    timestamp: string,
}

export global ViewModel {
    in property <bool> have-data: false;
    in property <bool> stale-data: false;
    in property <WeatherRecord> weather;
    in property <[WeatherRecord]> records;
}

component TemperatureGauge inherits BarGauge {
    unit: " °C";
    min-value: -25;
    max-value: 50;
    bar-color: Colors.hsv(320 - (root.level * 360), 1, 1);
}

component HumidityGauge inherits BarGauge {
    unit: " %";
    min-value: 0;

    // TODO: Properly mix colors,
    //       with balanced values in green
    //       and extreme values in red.
    // - Calculate distance between bar center and bar edges.
    // - Balance red and green values, with green = close to center and red = far from center.
    // - Keep blue at 0.
    property <percent> extremity: 0%;
    // value 0.5 -> extremity 0 %.
    // value 0 or 1 -> extremity 100 %.
    bar-color: #ff0000.mix(#0000ff, root.level);
}

export component AppWindow inherits Window {
    in-out property <int> counter: 42;
    callback request-increase-value();

    width: LayoutMetrics.window-width;
    height: LayoutMetrics.window-height;

    VerticalBox {
        TabWidget {
            Tab {
                title: "Weather";

                VerticalBox {
                    HorizontalLayout {
                        TemperatureGauge {
                            have-data: ViewModel.have-data;
                            stale-data: ViewModel.stale-data;
                            value: ViewModel.weather.temperature;
                        }

                        HumidityGauge {
                            have-data: ViewModel.have-data;
                            stale-data: ViewModel.stale-data;
                            value: ViewModel.weather.humidity;
                        }
                    }

                    Button {
                        text: "Increase counter";

                        clicked => {
                            root.request-increase-value();
                        }
                    }
                }
            }

            Tab {
                title: "History";
                ListView {
                    for record in ViewModel.records : Rectangle {
                        HorizontalBox {
                            Text {
                                horizontal-alignment: right;
                                text: record.timestamp;
                            }
                            Text {
                                horizontal-alignment: right;
                                text: Math.round(record.temperature * 10) / 10 + " °C";
                            }
                            Text {
                                horizontal-alignment: right;
                                text: Math.round(record.humidity * 10) / 10 + " %";
                            }
                        }
                    }
                }
            }
        }

        StatusBar {
            text: ViewModel.weather.timestamp + " Counter: " + root.counter;
        }
    }
}
